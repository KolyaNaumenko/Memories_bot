import os
from PIL import Image
from datetime import datetime, timedelta
from telegram import Update
from telegram.ext import ContextTypes, ConversationHandler
from database import add_entry_to_db, get_entries,delete_entry_from_db
from database import add_goal_to_db, get_goals_from_db, update_goal_status_in_db, delete_goal_from_db
from apscheduler.schedulers.background import BackgroundScheduler
from datetime import datetime
from datetime import timedelta
import pytz



# –ü–∞–ø–∫–∞ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
IMAGE_FOLDER = "images"
if not os.path.exists(IMAGE_FOLDER):
    os.makedirs(IMAGE_FOLDER)

# –°—Ç–∞—Ç—É—Å –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /add
WAITING_FOR_ENTRY = 1

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–∞—à –ª–∏—á–Ω—ã–π –¥–Ω–µ–≤–Ω–∏–∫! üìî\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –º—ã—Å–ª–∏, —Å–æ–±—ã—Ç–∏—è –∏–ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–ª—è—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.\n\n"
        "–í–æ—Ç, —á—Ç–æ —è –º–æ–≥—É:\n"
        "‚úèÔ∏è /add ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å (—Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–æ—Ç–æ)\n"
        "üìñ /view_all ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏\n"
        "üìÖ /view_day ‚Äî –∑–∞–ø–∏—Å–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è\n"
        "üóìÔ∏è /view_week ‚Äî –∑–∞–ø–∏—Å–∏ –∑–∞ –Ω–µ–¥–µ–ª—é\n"
        "üìÜ /view_month ‚Äî –∑–∞–ø–∏—Å–∏ –∑–∞ –º–µ—Å—è—Ü\n"
        "üéØ **–¶–µ–ª–∏ –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è**:\n"
        "   ‚Ä¢ /add_goal ‚Äî –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Ü–µ–ª—å —Å –¥–µ–¥–ª–∞–π–Ω–æ–º.\n"
        "     –ü—Ä–∏–º–µ—Ä: `/add_goal –í—ã—É—á–∏—Ç—å Python 2024-12-20 18:00`\n"
        "   ‚Ä¢ /list_goals ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ü–µ–ª–∏.\n"
        "   ‚Ä¢ /mark_goal ‚Äî –û—Ç–º–µ—Ç–∏—Ç—å —Ü–µ–ª—å –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é –∏–ª–∏ –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—É—é.\n"
        "     –ü—Ä–∏–º–µ—Ä: `/mark_goal 1 completed`\n"
        "   ‚Ä¢ /delete_goal ‚Äî –£–¥–∞–ª–∏—Ç—å —Ü–µ–ª—å –ø–æ –Ω–æ–º–µ—Ä—É.\n"
        "   ‚Ä¢ /goal_report ‚Äî –û—Ç—á–µ—Ç –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∏ –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã—Ö —Ü–µ–ª—è—Ö.\n\n"
        "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Ü–µ–ª—è—Ö –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –ø–µ—Ä–µ–¥ –¥–µ–¥–ª–∞–π–Ω–æ–º.\n\n"
        "‚ùì /help ‚Äî —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –∫–æ–º–∞–Ω–¥–∞—Ö.\n"
    )

# –ö–æ–º–∞–Ω–¥–∞ /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üí° –ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:\n\n"
        "‚úèÔ∏è /add ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å (–≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ).\n"
        "üìñ /view_all ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏.\n"
        "üìÖ /view_day ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø–∏—Å–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è.\n"
        "üóìÔ∏è /view_week ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø–∏—Å–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π.\n"
        "üìÜ /view_month ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø–∏—Å–∏ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü.\n"
        "üîç –ú–µ—Å—è—Ü –∏ –≥–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, *november2024*) ‚Äî –∑–∞–ø–∏—Å–∏ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.\n"
        "üéØ **–¶–µ–ª–∏ –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è**:\n"
        "   ‚Ä¢ /add_goal ‚Äî –î–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª—å —Å –¥–µ–¥–ª–∞–π–Ω–æ–º.\n"
        "     –§–æ—Ä–º–∞—Ç: `/add_goal –¶–µ–ª—å 2024-12-20 18:00`\n"
        "   ‚Ä¢ /list_goals ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ü–µ–ª–∏ (–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ, –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∏ –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã–µ).\n"
        "   ‚Ä¢ /mark_goal ‚Äî –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ü–µ–ª–∏ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é –∏–ª–∏ –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—É—é.\n"
        "     –§–æ—Ä–º–∞—Ç: `/mark_goal <–Ω–æ–º–µ—Ä —Ü–µ–ª–∏> completed/failed`\n"
        "   ‚Ä¢ /delete_goal ‚Äî –£–¥–∞–ª–∏—Ç—å —Ü–µ–ª—å –ø–æ –Ω–æ–º–µ—Ä—É.\n"
        "   ‚Ä¢ /goal_report ‚Äî –û—Ç—á–µ—Ç –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∏ –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã—Ö —Ü–µ–ª—è—Ö.\n\n"
        "üîî **–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è**:\n"
        "   –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –∑–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞ —Ü–µ–ª–∏.\n\n"
        "üí° **–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è**:\n"
        "   ‚Ä¢ `/add –£—Å–ø–µ—à–Ω—ã–π –¥–µ–Ω—å!`\n"
        "   ‚Ä¢ `/add_goal –ü—Ä–æ—á–∏—Ç–∞—Ç—å –∫–Ω–∏–≥—É 2024-12-31 20:00`\n"
        "   ‚Ä¢ `/mark_goal 1 completed`\n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, —Å–º–µ–ª–æ –ø–∏—à–∏—Ç–µ! üòä"
    )

# –ö–æ–º–∞–Ω–¥–∞ /add
# –ö–æ–º–∞–Ω–¥–∞ /add
async def add_entry(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚úèÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∑–∞–ø–∏—Å–∏!")
    return WAITING_FOR_ENTRY

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
async def save_entry(update, context):
    try:
        user_id = update.effective_user.id
        date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        message = update.message

        entry_text = message.text or ""  # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        photos = message.photo  # –í—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        image_paths = []  # –°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if photos:
            image_directory = "images"
            os.makedirs(image_directory, exist_ok=True)

            for photo in photos:
                # –ë–µ—Ä—ë–º –Ω–∞–∏–±–æ–ª—å—à—É—é –≤–µ—Ä—Å–∏—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
                file = await context.bot.get_file(photo.file_id)
                image_path = os.path.join(image_directory, f"{user_id}_{photo.file_id}.jpg")
                await file.download_to_drive(image_path)
                image_paths.append(image_path)  # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –≤ —Å–ø–∏—Å–æ–∫

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –∏–∑ –ø—É—Ç–µ–π –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º, —Ä–∞–∑–¥–µ–ª—è—è –∏—Ö –∑–∞–ø—è—Ç—ã–º–∏
        image_paths_str = ",".join(image_paths) if image_paths else None

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        add_entry_to_db(user_id, date, entry_text, image_paths_str)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        confirmation_message = f"‚úÖ –ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞!\nüìÖ {date}\n"
        if image_paths:
            confirmation_message += f"üñºÔ∏è –î–æ–±–∞–≤–ª–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(image_paths)}\n"
        if entry_text:
            confirmation_message += f"üìù {entry_text}"

        await update.message.reply_text(confirmation_message, parse_mode="Markdown")
    except Exception as e:
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏.")
        print(e)

def format_entry(date, entry_text, image_paths_str):
    formatted_entry = f"üìÖ {date}\n"
    if entry_text:
        formatted_entry += f"üìù {entry_text}\n"
    if image_paths_str:
        image_paths = image_paths_str.split(",")  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Å–ø–∏—Å–æ–∫
        formatted_entry += f"üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(image_paths)}\n"
    return formatted_entry


# –û—Ç–º–µ–Ω–∞ –∫–æ–º–∞–Ω–¥—ã
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /add.")
    return ConversationHandler.END

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –∑–∞–ø–∏—Å–µ–π
async def view_records(update: Update, context: ContextTypes.DEFAULT_TYPE, time_filter: str = None):
    user_id = update.effective_user.id
    now = datetime.now()
    start_date, end_date = None, None

    if time_filter == "day":
        start_date = now.strftime("%Y-%m-%d")
        end_date = f"{start_date} 23:59:59"
    elif time_filter == "week":
        start_date = (now - timedelta(days=now.weekday())).strftime("%Y-%m-%d")
        end_date = (now + timedelta(days=(6 - now.weekday()))).strftime("%Y-%m-%d") + " 23:59:59"
    elif time_filter == "month":
        start_date = now.strftime("%Y-%m-01")
        next_month = now.replace(day=28) + timedelta(days=4)  # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü
        end_date = next_month.replace(day=1).strftime("%Y-%m-%d") + " 23:59:59"

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    entries = get_entries(user_id, start_date, end_date)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å–∏
    if not entries:
        if time_filter == "day":
            response = "üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è."
        elif time_filter == "week":
            response = "üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –∑–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é."
        elif time_filter == "month":
            response = "üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –∑–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü."
        else:
            response = "üì≠ –£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π."
        await update.message.reply_text(response)
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    if time_filter == "day":
        response = f"üìÖ –ó–∞–ø–∏—Å–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è ({now.strftime('%Y-%m-%d')}):\n\n"
    elif time_filter == "week":
        response = f"üìÖ –ó–∞–ø–∏—Å–∏ –∑–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é:\n\n"
    elif time_filter == "month":
        response = f"üìÖ –ó–∞–ø–∏—Å–∏ –∑–∞ {now.strftime('%B %Y')}:\n\n"
    else:
        response = "üìî –í—Å–µ –∑–∞–ø–∏—Å–∏:\n\n"

    for idx, (date, entry_text, image_paths_str) in enumerate(entries, start=1):
        formatted_entry = format_entry(date, entry_text, image_paths_str)
        response += f"{idx}. {formatted_entry}\n"

    await update.message.reply_text(response)

def format_entry(date, entry_text, image_paths_str):
    formatted_entry = f"üìÖ {date}\n"
    if entry_text:
        formatted_entry += f"üìù {entry_text}\n"
    if image_paths_str:
        image_paths = image_paths_str.split(",")  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Å–ø–∏—Å–æ–∫
        formatted_entry += f"üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(image_paths)}\n"
    return formatted_entry


async def delete_entry(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    if not context.args or not context.args[0].isdigit():
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è. –ù–∞–ø—Ä–∏–º–µ—Ä: /delete 1")
        return

    record_number = int(context.args[0])
    entries = get_entries(user_id)  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è –Ω—É–º–µ—Ä–∞—Ü–∏–∏

    if record_number < 1 or record_number > len(entries):
        await update.message.reply_text("‚ö†Ô∏è –ó–∞–ø–∏—Å—å —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–º–µ—Ä –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    entry = entries[record_number - 1]
    date, text, image_path = entry

    delete_entry_from_db(user_id, date)

    # –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    if image_path:
        try:
            os.remove(image_path)
        except FileNotFoundError:
            pass

    await update.message.reply_text(f"‚úÖ –ó–∞–ø–∏—Å—å #{record_number} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!")



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø–∏—Å–µ–π
async def view_all(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await view_records(update, context, time_filter=None)

async def view_day(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await view_records(update, context, time_filter="day")

async def view_week(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await view_records(update, context, time_filter="week")

async def view_month(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await view_records(update, context, time_filter="month")

scheduler = BackgroundScheduler()
scheduler.start()

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Ü–µ–ª–∏
async def add_goal(update, context):
    try:
        user_id = update.effective_user.id
        message = update.message.text
        goal_data = message.replace("/add_goal", "").strip()  # –£–±–∏—Ä–∞–µ–º –∫–æ–º–∞–Ω–¥—É

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∫–∞–∑–∞–Ω—ã –ª–∏ —Ü–µ–ª—å –∏ –¥–µ–¥–ª–∞–π–Ω
        if not goal_data:
            await update.message.reply_text(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ü–µ–ª—å. –ü—Ä–∏–º–µ—Ä: `/add_goal –ü—Ä–æ—á–∏—Ç–∞—Ç—å –∫–Ω–∏–≥—É 2024-12-30` –∏–ª–∏ `/add_goal –ü—Ä–æ—á–∏—Ç–∞—Ç—å –∫–Ω–∏–≥—É` –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ 12:00.",
                parse_mode="Markdown"
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ –∫–æ–º–∞–Ω–¥–µ —É–∫–∞–∑–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ (–¥–µ–¥–ª–∞–π–Ω)
        try:
            # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç - —ç—Ç–æ –¥–µ–¥–ª–∞–π–Ω
            *goal_parts, possible_deadline = goal_data.rsplit(maxsplit=1)
            goal_text = " ".join(goal_parts).strip()  # –¶–µ–ª—å - –≤—Å—ë, –∫—Ä–æ–º–µ –¥–µ–¥–ª–∞–π–Ω–∞

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç - —ç—Ç–æ –¥–∞—Ç–∞ –∏–ª–∏ –¥–∞—Ç–∞ —Å –≤—Ä–µ–º–µ–Ω–µ–º
            if len(possible_deadline) == 10:  # –§–æ—Ä–º–∞—Ç YYYY-MM-DD
                deadline_str = f"{possible_deadline} 12:00"
            else:
                deadline_str = possible_deadline  # –§–æ—Ä–º–∞—Ç YYYY-MM-DD HH:MM

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–µ–¥–ª–∞–π–Ω–∞ –≤ datetime
            deadline = datetime.strptime(deadline_str, "%Y-%m-%d %H:%M")
        except (ValueError, IndexError):  # –ï—Å–ª–∏ –¥–µ–¥–ª–∞–π–Ω –Ω–µ —É–∫–∞–∑–∞–Ω –∏–ª–∏ —É–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω–æ
            goal_text = goal_data  # –í—Å—ë —Å–æ–æ–±—â–µ–Ω–∏–µ - —Ü–µ–ª—å
            deadline = datetime.now().replace(hour=12, minute=0, second=0, microsecond=0)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—Å—Ç —Ü–µ–ª–∏
        if not goal_text:
            await update.message.reply_text(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ü–µ–ª–∏. –ü—Ä–∏–º–µ—Ä: `/add_goal –ü—Ä–æ—á–∏—Ç–∞—Ç—å –∫–Ω–∏–≥—É 2024-12-30`.",
                parse_mode="Markdown"
            )
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–ª—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        add_goal_to_db(user_id, goal_text, deadline)

        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        await schedule_reminders(context, user_id, goal_text, deadline)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        await update.message.reply_text(
            f"üéØ –¶–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω–∞: *{goal_text}*\nüïí –î–µ–¥–ª–∞–π–Ω: {deadline.strftime('%Y-%m-%d %H:%M')}",
            parse_mode="Markdown"
        )
    except Exception as e:
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç: `/add_goal –¶–µ–ª—å YYYY-MM-DD HH:MM` –∏–ª–∏ `/add_goal –¶–µ–ª—å` –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ 12:00."
        )
        print(e)

async def schedule_reminders(context, user_id, goal_text, deadline):
    job_queue = context.job_queue

    # –†–∞—Å—á—ë—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ç–æ—á–µ–∫ –¥–ª—è —Ç—Ä—ë—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    now = datetime.now()
    total_seconds = (deadline - now).total_seconds()

    if total_seconds <= 0:
        return  # –ï—Å–ª–∏ –¥–µ–¥–ª–∞–π–Ω —É–∂–µ –ø—Ä–æ—à—ë–ª, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–µ –ø–ª–∞–Ω–∏—Ä—É—é—Ç—Å—è

    reminder_intervals = [total_seconds / 4, total_seconds / 2, (3 * total_seconds) / 4]
    reminder_times = [now + timedelta(seconds=interval) for interval in reminder_intervals]

    for reminder_time in reminder_times:
        job_queue.run_once(
            reminder_callback,
            when=(reminder_time - now),
            data={"user_id": user_id, "goal_text": goal_text, "deadline": deadline},
        )

async def reminder_callback(job):
    data = job.data
    user_id = data["user_id"]
    goal_text = data["goal_text"]
    deadline = data["deadline"]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    await job.application.bot.send_message(
        chat_id=user_id,
        text=f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!\n–¶–µ–ª—å: {goal_text}\nüïí –î–µ–¥–ª–∞–π–Ω: {deadline.strftime('%Y-%m-%d %H:%M')}"
    )

# –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ü–µ–ª–∏
async def list_goals(update, context):
    user_id = update.effective_user.id
    goals = get_goals_from_db(user_id)

    if not goals:
        await update.message.reply_text("üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ü–µ–ª–µ–π.")
        return

    response = "üéØ –í–∞—à–∏ —Ü–µ–ª–∏:\n"
    for idx, (goal_id, goal_text, deadline, status) in enumerate(goals, start=1):
        response += f"{idx}. {goal_text} (–¥–æ {deadline}) ‚Äî {status.capitalize()}\n"
    await update.message.reply_text(response)

# –û—Ç–º–µ—Ç–∏—Ç—å —Ü–µ–ª—å –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é –∏–ª–∏ –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—É—é
async def mark_goal(update, context):
    if len(context.args) < 2:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ü–µ–ª–∏ –∏ —Å—Ç–∞—Ç—É—Å (completed/failed). –ü—Ä–∏–º–µ—Ä: /mark_goal 1 completed")
        return

    goal_id = int(context.args[0])
    status = context.args[1]

    if status not in ["completed", "failed"]:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: completed –∏–ª–∏ failed.")
        return

    update_goal_status_in_db(goal_id, status)
    await update.message.reply_text(f"‚úÖ –°—Ç–∞—Ç—É—Å —Ü–µ–ª–∏ #{goal_id} –æ–±–Ω–æ–≤–ª—ë–Ω: {status.capitalize()}")

# –£–¥–∞–ª–µ–Ω–∏–µ —Ü–µ–ª–∏
async def delete_goal(update, context):
    if not context.args or not context.args[0].isdigit():
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ü–µ–ª–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è. –ù–∞–ø—Ä–∏–º–µ—Ä: /delete_goal 1")
        return

    goal_id = int(context.args[0])
    delete_goal_from_db(goal_id)
    await update.message.reply_text(f"‚úÖ –¶–µ–ª—å #{goal_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")

# –û—Ç—á–µ—Ç –æ —Ü–µ–ª—è—Ö
async def goal_report(update, context):
    user_id = update.effective_user.id
    goals = get_goals_from_db(user_id)

    completed = [g for g in goals if g[3] == "completed"]
    failed = [g for g in goals if g[3] == "failed"]

    response = "üìä –û—Ç—á–µ—Ç –æ —Ü–µ–ª—è—Ö:\n"
    response += f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {len(completed)}\n"
    response += f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {len(failed)}\n"

    if completed:
        response += "\nüéâ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Ü–µ–ª–∏:\n"
        for goal in completed:
            response += f"- {goal[1]} (–¥–æ {goal[2]})\n"

    if failed:
        response += "\nüòû –ü—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã–µ —Ü–µ–ª–∏:\n"
        for goal in failed:
            response += f"- {goal[1]} (–¥–æ {goal[2]})\n"

    await update.message.reply_text(response)