import os
from PIL import Image
from datetime import datetime, timedelta
from telegram import Update
from telegram.ext import ContextTypes, ConversationHandler
from database import add_entry_to_db, get_entries,delete_entry_from_db


# –ü–∞–ø–∫–∞ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
IMAGE_FOLDER = "images"
if not os.path.exists(IMAGE_FOLDER):
    os.makedirs(IMAGE_FOLDER)

# –°—Ç–∞—Ç—É—Å –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /add
WAITING_FOR_ENTRY = 1

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–∞—à –ª–∏—á–Ω—ã–π –¥–Ω–µ–≤–Ω–∏–∫! üìî\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –º—ã—Å–ª–∏, —Å–æ–±—ã—Ç–∏—è –∏–ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–ª—è—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.\n\n"
        "–í–æ—Ç, —á—Ç–æ —è –º–æ–≥—É:\n"
        "‚úèÔ∏è /add ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å (—Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–æ—Ç–æ)\n"
        "üìñ /view_all ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏\n"
        "üìÖ /view_day ‚Äî –∑–∞–ø–∏—Å–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è\n"
        "üóìÔ∏è /view_week ‚Äî –∑–∞–ø–∏—Å–∏ –∑–∞ –Ω–µ–¥–µ–ª—é\n"
        "üìÜ /view_month ‚Äî –∑–∞–ø–∏—Å–∏ –∑–∞ –º–µ—Å—è—Ü\n"
        "üîç –í–≤–µ–¥–∏—Ç–µ –º–µ—Å—è—Ü –∏ –≥–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, november2024), —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∑–∞–ø–∏—Å–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥.\n"
        "‚ùì /help ‚Äî —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –∫–æ–º–∞–Ω–¥–∞—Ö.\n"
    )

# –ö–æ–º–∞–Ω–¥–∞ /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üí° –ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:\n\n"
        "‚úèÔ∏è /add ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å (–≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ).\n"
        "üìñ /view_all ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏.\n"
        "üìÖ /view_day ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø–∏—Å–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è.\n"
        "üóìÔ∏è /view_week ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø–∏—Å–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π.\n"
        "üìÜ /view_month ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø–∏—Å–∏ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü.\n"
        "üîç –ú–µ—Å—è—Ü –∏ –≥–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, *november2024*) ‚Äî –∑–∞–ø–∏—Å–∏ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.\n"
    )

# –ö–æ–º–∞–Ω–¥–∞ /add
# –ö–æ–º–∞–Ω–¥–∞ /add
async def add_entry(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚úèÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∑–∞–ø–∏—Å–∏!")
    return WAITING_FOR_ENTRY

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
async def save_entry(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    entry = update.message.caption if update.message.caption else update.message.text  # –¢–µ–∫—Å—Ç –∏–ª–∏ –ø–æ–¥–ø–∏—Å—å
    image_path = None

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    if update.message.photo:
        photo = update.message.photo[-1]  # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –Ω–∞–∏–ª—É—á—à–µ–º –∫–∞—á–µ—Å—Ç–≤–µ
        image_file = await photo.get_file()
        temp_path = os.path.join(IMAGE_FOLDER, f"{user_id}_{datetime.now().strftime('%Y%m%d%H%M%S')}.jpg")

        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –Ω–∞ –¥–∏—Å–∫
        await image_file.download_to_drive(temp_path)

        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç (JPEG)
        try:
            with Image.open(temp_path) as img:
                img = img.convert("RGB")  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ RGB –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ JPEG
                image_path = temp_path.replace(".jpg", "_converted.jpg")
                img.save(image_path, "JPEG")
                os.remove(temp_path)  # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        except Exception as e:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            return ConversationHandler.END

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    add_entry_to_db(user_id, date, entry, image_path)

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await update.message.reply_text(
        "‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n"
        f"üìÖ –î–∞—Ç–∞: {date}\n"
        f"‚úèÔ∏è –¢–µ–∫—Å—Ç: {entry if entry else '–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞'}\n"
        f"üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {'–î–∞' if image_path else '–ù–µ—Ç'}"
    )
    return ConversationHandler.END


# –û—Ç–º–µ–Ω–∞ –∫–æ–º–∞–Ω–¥—ã
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /add.")
    return ConversationHandler.END

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –∑–∞–ø–∏—Å–µ–π
async def view_records(update: Update, context: ContextTypes.DEFAULT_TYPE, time_filter=None):
    user_id = update.effective_user.id
    now = datetime.now()

    # –í—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    if time_filter == "day":
        start_date = now.strftime("%Y-%m-%d 00:00:00")
        entries = get_entries(user_id, start_date=start_date)
    elif time_filter == "week":
        start_date = (now - timedelta(days=7)).strftime("%Y-%m-%d 00:00:00")
        entries = get_entries(user_id, start_date=start_date)
    elif time_filter == "month":
        start_date = now.replace(day=1).strftime("%Y-%m-%d 00:00:00")
        entries = get_entries(user_id, start_date=start_date)
    else:
        entries = get_entries(user_id)  # –í—Å–µ –∑–∞–ø–∏—Å–∏

    if entries:
        all_entries = get_entries(user_id)  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è –µ–¥–∏–Ω–æ–π –Ω—É–º–µ—Ä–∞—Ü–∏–∏
        for idx, entry in enumerate(entries, start=1 + len(all_entries) - len(entries)):  # –ù—É–º–µ—Ä–∞—Ü–∏—è —Å —É—á—ë—Ç–æ–º –æ–±—â–µ–≥–æ –ø–æ—Ä—è–¥–∫–∞
            date, text, image_path = entry
            message = f"üìù –ó–∞–ø–∏—Å—å #{idx}:\nüìÖ {date}\n"
            if text:
                message += f"‚úèÔ∏è {text}\n"
            if image_path:
                message += "üñºÔ∏è [–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ]"
            await update.message.reply_text(message)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
            if image_path:
                with open(image_path, "rb") as img:
                    await update.message.reply_photo(photo=img)

        await update.message.reply_text(
            "‚úÖ –í—Å–µ –∑–∞–ø–∏—Å–∏ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.\n"
            "‚ùå –ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /delete –∏ —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä: /delete 1"
        )
    else:
        await update.message.reply_text("‚ö†Ô∏è –í —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞–ø–∏—Å–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

async def delete_entry(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    if not context.args or not context.args[0].isdigit():
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è. –ù–∞–ø—Ä–∏–º–µ—Ä: /delete 1")
        return

    record_number = int(context.args[0])
    entries = get_entries(user_id)  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è –Ω—É–º–µ—Ä–∞—Ü–∏–∏

    if record_number < 1 or record_number > len(entries):
        await update.message.reply_text("‚ö†Ô∏è –ó–∞–ø–∏—Å—å —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–º–µ—Ä –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    entry = entries[record_number - 1]
    date, text, image_path = entry

    delete_entry_from_db(user_id, date)

    # –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    if image_path:
        try:
            os.remove(image_path)
        except FileNotFoundError:
            pass

    await update.message.reply_text(f"‚úÖ –ó–∞–ø–∏—Å—å #{record_number} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø–∏—Å–µ–π
async def view_all(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await view_records(update, context, time_filter=None)

async def view_day(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await view_records(update, context, time_filter="day")

async def view_week(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await view_records(update, context, time_filter="week")

async def view_month(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await view_records(update, context, time_filter="month")